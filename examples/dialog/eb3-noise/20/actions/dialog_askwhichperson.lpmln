astep(0..m-1).
step(0..m).
boolean(t; f).
item(coffee; coke; cookies; burger).
person(alice; bob; carol).
room(r1; r2).

% UEC
:- obs_Item(X1, I), obs_Item(X2, I), X1 != X2.
:- not obs_Item(coffee, I), not obs_Item(coke, I),
   not obs_Item(cookies, I), not obs_Item(burger, I),
   not obs_Item(na, I), step(I).
:- obs_Person(X1, I), obs_Person(X2, I), X1 != X2.
:- not obs_Person(alice, I), not obs_Person(bob, I),
   not obs_Person(carol, I), not obs_Person(na, I),
   step(I).
:- obs_Room(X1, I), obs_Room(X2, I), X1 != X2.
:- not obs_Room(r1, I), not obs_Room(r2, I),
   not obs_Room(na, I),
   step(I).
:- obs_YesOrNo(X1, I), obs_YesOrNo(X2, I), X1 != X2.
:- not obs_YesOrNo(yes, I), not obs_YesOrNo(no, I),
   not obs_YesOrNo(na, I), step(I).

:- fl_ItemRequested(X1, I), fl_ItemRequested(X2, I), X1 != X2.
:- not fl_ItemRequested(coffee, I), not fl_ItemRequested(coke, I),
   not fl_ItemRequested(cookies, I), not fl_ItemRequested(burger, I),
   not fl_ItemRequested(na, I), step(I).
:- fl_PersonRequested(X1, I), fl_PersonRequested(X2, I), X1 != X2.
:- not fl_PersonRequested(alice, I), not fl_PersonRequested(bob, I),
   not fl_PersonRequested(carol, I), not fl_PersonRequested(na, I),
   step(I).
:- fl_RoomRequested(X1, I), fl_RoomRequested(X2, I), X1 != X2.
:- not fl_RoomRequested(r1, I), not fl_RoomRequested(r2, I),
   not fl_RoomRequested(na, I),
   step(I).
:- fl_Terminated(X1, I), fl_Terminated(X2, I), X1 != X2.
:- not fl_Terminated(t, I), not fl_Terminated(f, I), step(I).

%% No two observations can occur at the same time step
:- obs_Item(It, I), obs_Person(P, I), It != na, P != na.
:- obs_Item(It, I), obs_Room(R, I), It != na, R != na.
:- obs_Item(It, I), obs_YesOrNo(C, I), It != na, C != na.
:- obs_Person(P, I), obs_Room(R, I), P != na, R != na.
:- obs_Person(P, I), obs_YesOrNo(C, I), P != na, C != na.
:- obs_Room(R, I), obs_YesOrNo(C, I), R != na, C != na.

% Fluent Dynamic Laws
{fl_ItemRequested(It, I+1)} :- fl_ItemRequested(It, I), astep(I).
{fl_PersonRequested(P, I+1)} :- fl_PersonRequested(P, I), astep(I).
{fl_RoomRequested(R, I+1)} :- fl_RoomRequested(R, I), astep(I).
{fl_Terminated(B, I+1)} :- fl_Terminated(B, I), astep(I).

% Actions and initial value of regular fluents and observation constants are exogenous
{fl_Terminated(B, 0)} :- boolean(B).
{fl_ItemRequested(It, 0)} :- item(It).
{fl_PersonRequested(P, 0)} :- person(P).
{fl_RoomRequested(R, 0)} :- room(R).
{obs_Item(It, 0)} :- item(It).
{obs_Person(P, 0)} :- person(P).
{obs_Room(R, 0)} :- room(R).
{obs_YesOrNo(yes, 0); obs_YesOrNo(no, 0)}.

% By default, observation constant has na value
{obs_Item(na, I)} :- step(I).
{obs_Person(na, I)} :- step(I).
{obs_Room(na, I)} :- step(I).
{obs_YesOrNo(na, I)} :- step(I).

% Action: AskWhichPerson
:- act_AskWhichPerson(X1, I), act_AskWhichPerson(X2, I), X1 != X2.
:- not act_AskWhichPerson(t, I), not act_AskWhichPerson(f, I), astep(I).

:- pf_AnswerWhichPerson(P, X1, I), pf_AnswerWhichPerson(P, X2, I), X1 != X2.
:- not pf_AnswerWhichPerson(P, alice, I), not pf_AnswerWhichPerson(P, bob, I),
   not pf_AnswerWhichPerson(P, carol, I), person(P), astep(I).

@log(0.8) pf_AnswerWhichPerson(alice, alice, I) :- astep(I).
@log(0.1) pf_AnswerWhichPerson(alice, bob, I) :- astep(I).
@log(0.1) pf_AnswerWhichPerson(alice, carol, I) :- astep(I).
@log(0.1) pf_AnswerWhichPerson(bob, alice, I) :- astep(I).
@log(0.8) pf_AnswerWhichPerson(bob, bob, I) :- astep(I).
@log(0.1) pf_AnswerWhichPerson(bob, carol, I) :- astep(I).
@log(0.1) pf_AnswerWhichPerson(carol, alice, I) :- astep(I).
@log(0.1) pf_AnswerWhichPerson(carol, bob, I) :- astep(I).
@log(0.8) pf_AnswerWhichPerson(carol, carol, I) :- astep(I).

obs_Person(P1, I+1) :- fl_PersonRequested(P, I+1), fl_Terminated(f, I+1), 
           act_AskWhichPerson(t, I), pf_AnswerWhichPerson(P, P1, I).

utility(-4, I+1, act_AskWhichPerson) :- act_AskWhichPerson(t, I).


%{act_AskWhichPerson(B, I)} :- boolean(B), astep(I).
act_AskWhichPerson(t, I) :- astep(I).


